/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { LoanStatusService } from "../loanStatus.service";
import { LoanStatusCreateInput } from "./LoanStatusCreateInput";
import { LoanStatus } from "./LoanStatus";
import { LoanStatusFindManyArgs } from "./LoanStatusFindManyArgs";
import { LoanStatusWhereUniqueInput } from "./LoanStatusWhereUniqueInput";
import { LoanStatusUpdateInput } from "./LoanStatusUpdateInput";

export class LoanStatusControllerBase {
  constructor(protected readonly service: LoanStatusService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: LoanStatus })
  async createLoanStatus(
    @common.Body() data: LoanStatusCreateInput
  ): Promise<LoanStatus> {
    return await this.service.createLoanStatus({
      data: data,
      select: {
        createdAt: true,
        description: true,
        id: true,
        statusName: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [LoanStatus] })
  @ApiNestedQuery(LoanStatusFindManyArgs)
  async loanStatuses(@common.Req() request: Request): Promise<LoanStatus[]> {
    const args = plainToClass(LoanStatusFindManyArgs, request.query);
    return this.service.loanStatuses({
      ...args,
      select: {
        createdAt: true,
        description: true,
        id: true,
        statusName: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: LoanStatus })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async loanStatus(
    @common.Param() params: LoanStatusWhereUniqueInput
  ): Promise<LoanStatus | null> {
    const result = await this.service.loanStatus({
      where: params,
      select: {
        createdAt: true,
        description: true,
        id: true,
        statusName: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: LoanStatus })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateLoanStatus(
    @common.Param() params: LoanStatusWhereUniqueInput,
    @common.Body() data: LoanStatusUpdateInput
  ): Promise<LoanStatus | null> {
    try {
      return await this.service.updateLoanStatus({
        where: params,
        data: data,
        select: {
          createdAt: true,
          description: true,
          id: true,
          statusName: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: LoanStatus })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteLoanStatus(
    @common.Param() params: LoanStatusWhereUniqueInput
  ): Promise<LoanStatus | null> {
    try {
      return await this.service.deleteLoanStatus({
        where: params,
        select: {
          createdAt: true,
          description: true,
          id: true,
          statusName: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
