/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { LoanStatus } from "./LoanStatus";
import { LoanStatusCountArgs } from "./LoanStatusCountArgs";
import { LoanStatusFindManyArgs } from "./LoanStatusFindManyArgs";
import { LoanStatusFindUniqueArgs } from "./LoanStatusFindUniqueArgs";
import { CreateLoanStatusArgs } from "./CreateLoanStatusArgs";
import { UpdateLoanStatusArgs } from "./UpdateLoanStatusArgs";
import { DeleteLoanStatusArgs } from "./DeleteLoanStatusArgs";
import { LoanStatusService } from "../loanStatus.service";
@graphql.Resolver(() => LoanStatus)
export class LoanStatusResolverBase {
  constructor(protected readonly service: LoanStatusService) {}

  async _loanStatusesMeta(
    @graphql.Args() args: LoanStatusCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [LoanStatus])
  async loanStatuses(
    @graphql.Args() args: LoanStatusFindManyArgs
  ): Promise<LoanStatus[]> {
    return this.service.loanStatuses(args);
  }

  @graphql.Query(() => LoanStatus, { nullable: true })
  async loanStatus(
    @graphql.Args() args: LoanStatusFindUniqueArgs
  ): Promise<LoanStatus | null> {
    const result = await this.service.loanStatus(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => LoanStatus)
  async createLoanStatus(
    @graphql.Args() args: CreateLoanStatusArgs
  ): Promise<LoanStatus> {
    return await this.service.createLoanStatus({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => LoanStatus)
  async updateLoanStatus(
    @graphql.Args() args: UpdateLoanStatusArgs
  ): Promise<LoanStatus | null> {
    try {
      return await this.service.updateLoanStatus({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => LoanStatus)
  async deleteLoanStatus(
    @graphql.Args() args: DeleteLoanStatusArgs
  ): Promise<LoanStatus | null> {
    try {
      return await this.service.deleteLoanStatus(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
