/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsNumber,
  IsOptional,
  IsDate,
  IsEnum,
  ValidateNested,
  IsString,
} from "class-validator";
import { Type } from "class-transformer";
import { EnumLoanInstallmentFrequency } from "./EnumLoanInstallmentFrequency";
import { PaymentCreateNestedManyWithoutLoansInput } from "./PaymentCreateNestedManyWithoutLoansInput";
import { UserWhereUniqueInput } from "../../user/base/UserWhereUniqueInput";

@InputType()
class LoanCreateInput {
  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  amount?: number | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  dueDate?: Date | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  installmentAmount?: number | null;

  @ApiProperty({
    required: false,
    enum: EnumLoanInstallmentFrequency,
  })
  @IsEnum(EnumLoanInstallmentFrequency)
  @IsOptional()
  @Field(() => EnumLoanInstallmentFrequency, {
    nullable: true,
  })
  installmentFrequency?: "Option1" | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  issuedDate?: Date | null;

  @ApiProperty({
    required: false,
    type: () => PaymentCreateNestedManyWithoutLoansInput,
  })
  @ValidateNested()
  @Type(() => PaymentCreateNestedManyWithoutLoansInput)
  @IsOptional()
  @Field(() => PaymentCreateNestedManyWithoutLoansInput, {
    nullable: true,
  })
  payments?: PaymentCreateNestedManyWithoutLoansInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  status?: string | null;

  @ApiProperty({
    required: false,
    type: () => UserWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => UserWhereUniqueInput)
  @IsOptional()
  @Field(() => UserWhereUniqueInput, {
    nullable: true,
  })
  user?: UserWhereUniqueInput | null;
}

export { LoanCreateInput as LoanCreateInput };
